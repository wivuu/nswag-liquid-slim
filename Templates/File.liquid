/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v{{ ToolchainVersion }} (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

{{ ExtensionCodeImport -}}
{% if ImportRequiredTypes -%}
{%     if GenerateClientClasses -%}
{%         if Framework.IsAngular -%}

{%             if Framework.UseRxJs5 -%}
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
{%             else -%}
import { mergeMap as {{ Framework.RxJs.ObservableMergeMapMethod }}, catchError as {{ Framework.RxJs.ObservableCatchMethod }} } from 'rxjs/operators';
import { Observable, {% if UseTransformOptionsMethod %}from as {{ Framework.RxJs.ObservableFromMethod }}, {% endif %}throwError as {{ Framework.RxJs.ObservableThrowMethod }}, of as {{ Framework.RxJs.ObservableOfMethod }} } from 'rxjs';
{%             endif -%}
import { Injectable, Inject, Optional, {{ Framework.Angular.InjectionTokenType }} } from '@angular/core';
{%             if Framework.Angular.UseHttpClient -%}
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
{%             else -%}
import { Http, Headers, ResponseContentType, Response{% if UseTransformOptionsMethod %}, RequestOptionsArgs{% endif %} } from '@angular/http';
{%             endif -%}
{%         endif -%}
{%         if Framework.IsAurelia -%}

import { inject } from 'aurelia-framework';
import { HttpClient, RequestInit } from 'aurelia-fetch-client';
{%         endif -%}
{%         if Framework.IsAngularJS -%}

import * as ng from 'angular';
{%         endif -%}
{%         if Framework.IsAxios -%}

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
{%         endif -%}
{%         if Framework.IsKnockout -%}

import * as ko from 'knockout';
{%         endif -%}
{%         if Framework.IsJQuery -%}

import * as jQuery from 'jquery';
{%         endif -%}
{%     endif -%}
{%     if Framework.UseMomentJS -%}

import * as moment from 'moment';
{%         if RequiresMomentJSDuration -%}
import 'moment-duration-format';
{%         endif -%}
{%     endif -%}
{% endif -%}

{% if HasModuleName -%}
{% if ExportTypes %}export {% endif %}module {{ ModuleName }} {
{% endif -%}
{% if HasNamespace -%}
namespace {{ Namespace }} {
{% endif -%}
{% if GenerateClientClasses and Framework.IsAngular -%}
{% if ExportTypes %}export {% endif %}const {{ Framework.Angular.BaseUrlTokenName }} = new {{ Framework.Angular.InjectionTokenType }}{% if Framework.Angular.InjectionTokenType == "InjectionToken" %}<string>{% endif %}('{{ Framework.Angular.BaseUrlTokenName }}');

{% endif -%}
{{ ExtensionCodeTop }}

{{ Clients }}

{{ Types }}

{% if WrapResponses and GenerateResponseClasses -%}
{%     for responseClassName in ResponseClassNames -%}
{% if ExportTypes %}export {% endif %}class {{ responseClassName }}<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

{%     endfor -%}
{% endif -%}
{% if RequiresFileParameterInterface -%}
{% if ExportTypes %}export {% endif %}interface FileParameter {
    data: any;
    fileName: string;
}

{% endif -%}
{% if RequiresFileResponseInterface -%}
{% if ExportTypes %}export {% endif %}interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

{% endif -%}

{{ ExtensionCodeBottom }}
{% if HasNamespace -%}
}
{% endif -%}
{% if HasModuleName -%}
}
{% endif -%}

type HttpMethodsWithBody = "put" | "post" | "patch";
type HttpMethods = "head" | "get" | "delete" | HttpMethodsWithBody;

{% if UseGetBaseUrlMethod -%}
let baseUrl = getBaseUrl("{{ BaseUrl }}");
{% else -%}
let baseUrl = "{{ BaseUrl }}";
{% endif -%}

export function setBaseUrl(url: string) {
    baseUrl = url;
}

const jsonRequestInfo : RequestInit = {
    headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
}

const defaultRequestInfo : RequestInit = {
    headers: {
        "Accept": "application/json"
    }
}

const pattern = /\/\{\w+\}/g;

/** Format params string, removing {template} values and any matches from the params object */
function formatParams<T extends { [key: string]: any }>(info: string, model: T) {
    const matches = info.match(pattern);

    if (matches)
        for (const m of matches) {
            const key   = m.slice(2, -1),
                  value = model[key] as any;

            if (value !== null && value !== undefined) {
                info = info.replace(m, "/" + encodeURIComponent("" + value));
                delete model[key];
            }
            else
                info = info.replace(m, "");
        }

    return info;
}

/** Format a querystring from an object */
function formatQueryString<T extends { [key: string]: any }>(model: T) {
    const keys = Object.keys(model);
    let qs     = "";

    for (let i = 0; i < keys.length; ++i) {
        const key   = keys[i],
              raw   = model[key],
              value = raw instanceof Date
                ? raw.toJSON()
                : raw;

        if (value !== null && value !== undefined) {
            let encodedKey = encodeURIComponent(key);

            if (Array.isArray(value))
                for (let i = 0; i < value.length; ++i) {
                    let value_i = value[i] instanceof Date
                        ? value[i].toJSON()
                        : value[i];

                    qs += (qs.length === 0 ? "?" : "&") + encodedKey + "=" + encodeURIComponent("" + value_i);
                }
            else
                qs += (qs.length === 0 ? "?" : "&") + encodedKey + "=" + encodeURIComponent("" + value);
        }
    }

    return qs;
}

declare interface FormDataOf<T> extends FormData {}

/** Return FormData */
export function formData<T extends { [key: string]: any }>(value?: T): FormDataOf<T> {
    const data = new FormData();
    
    function formDataInner(prefix: string, value: T | undefined) {
        if (value !== null && value !== undefined) {
            if (typeof(value) === "object") {
                if (value instanceof File)
                    data.append(prefix, value, value.name);
                
                else if (Array.isArray(value)) {
                    let i = 0;
                    for (let e of value)
                        formDataInner(prefix + `[${i++}]`, e);
                }
                else {
                    if (prefix)
                        prefix = prefix + ".";

                    for (const key of Object.keys(value))
                        formDataInner(prefix + key, value[key]);
                }
            }
            else
                data.append(prefix, value);
        }
    }
    
    formDataInner("", value);

    return data;
}

/** Retrieve formatted URL for path */
function getRoute(path: string, inputParams?: object | null) {
    const params = inputParams instanceof Object ? { ...inputParams } : inputParams;
    const info   = !!params ? formatParams(path, params) : path;
    const qs     = !!params ? formatQueryString(params)  : "";

    return baseUrl + info + qs;
}

/** API Base function */
function apiBase(method: HttpMethods, path: string, isForm?: boolean) {

    return async function (inputParams?: object | null, body?: any | FormData) {
        const response = await fetch(
            getRoute(path, inputParams),
            {
                method,
                ... isForm ? defaultRequestInfo : jsonRequestInfo,
                body: isForm
                    ? (body instanceof FormData ? body : formData(body))
                    : JSON.stringify(body)
            });

        const contentType = response.headers.get("content-type") ?? "";

        if (response.ok) {
            if (contentType.indexOf("application/json") !== -1)
                return await response.json();
            else if (contentType.indexOf("text/plain") !== -1)
                return await response.text();
                else if (response.status === 204)
                return null;
            else
                return response;
        }
        else {
            if (contentType.indexOf("application/problem+json") !== -1)
                throw new APIError(response.status, response, await response.json());
            else
                throw new APIError(response.status, response);
        }
    }
}

export class APIError extends Error {
    constructor(public status: number, public response: Response, public problem?: { detail?: string }) {
        super(problem?.detail ?? "API Error");
    }
}
