{% if HasOperations -%}

{% if HasExtensionCode -%}
    {{ ExtensionCode }}
{% endif -%}


{% comment %}
    PARAMETER DECLARATIONS
{% endcomment -%}
{% for operation in Operations | sort: HttpMethod -%}
{% if operation.Parameters.first -%}
type {{operation.OperationName}}{{ Class }}Params = {
{% for parameter in operation.Parameters -%}
    {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}
{% endfor -%}
};
{% endif -%}
{% endfor -%}


{% comment %}
    GET
{% endcomment -%}
{% for operation in Operations | sort: HttpMethod -%}
{% if operation.HttpMethod == "get" -%}

{% template Client.Method.Documentation -%}
export function get{{ Class }}(info: "/{{ operation.Path }}"{%if operation.Parameters.first %}, params: TypedRequestInit<{{operation.OperationName}}{{ Class }}Params>{%endif%}): Promise<{{ operation.ResultType }}>;

{% endif -%}
{% endfor -%}

/** GET {{Class}} */
export async function get{{ Class }}(info: string, init?: TypedRequestInit): Promise<unknown> {
    // return apiBase("GET", info, init, getModel(init));
    throw new Error("Not implemented");
}

{% comment %}
    PUT
{% endcomment -%}
{% for operation in Operations | sort: HttpMethod -%}
{% if operation.HttpMethod == "put" %}

{% template Client.Method.Documentation -%}
export function put{{ Class }}(info: "/{{ operation.Path }}"{%if operation.Parameters.first %}, params: TypedRequestInit<{{operation.OperationName}}{{ Class }}Params>{%endif%}): Promise<{{ operation.ResultType }}>;

{% endif %}
{% endfor -%}

/** PUT {{Class}} */
export async function put{{ Class }}(info: string, init?: TypedRequestInit): Promise<unknown> {
    // return apiBase("GET", info, init, getModel(init));
    throw new Error("Not implemented");
}

{% endif -%}