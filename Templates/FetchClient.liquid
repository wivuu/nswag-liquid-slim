{% if HasOperations -%}
{% if GenerateClientInterfaces -%}
{% if ExportTypes %}export {% endif %}interface I{{ Class }} {
{%     for operation in Operations -%}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ResultType }}>;
{%     endfor -%}}
{% endif -%}

{% if HasExtensionCode -%}
    {{ ExtensionCode }}
{% endif -%}

{% comment %}
GET
{% endcomment -%}

{% assign getOperations =  | where:false -%}
{% for operation in Operations | sort: "HttpMethod" -%}
    {% template Client.Method.Documentation -%}
export async function fetch{{ Class }}(info: "/{{ operation.Path }}"{%if operation.Parameters.first %}, {%endif%}{% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ResultType }}>;
{% endfor -%}

export async function fetch{{ Class }}(info: RequestInfo, init: TypedRequestInit) {
    const response = await fetch(
        info,
        "model" in init 
            ? { method: "POST", ...defaultRequestInfo, ...init, body: JSON.stringify(init.model) }
            : { method: "POST", ...defaultRequestInfo, body: JSON.stringify(init) }
    );

    return await response.json();
}


{% endif -%}